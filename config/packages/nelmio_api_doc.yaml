nelmio_api_doc:
  areas: # to filter documented areas
    path_patterns:
      - ^/api(?!/doc$) # Accepts routes under /api except /api/doc
  documentation:
    info:
      title: BO rewrite
      description: BO rewrite API list
      version: 1.0.0
    components:
      parameters:
        documentUid:
          name: documentUid
          in: path
          description: Document uid
          required: true
        filters:
          name: filters
          in: query
          description: Filters applied to the request - any database property from the table 'user_dossier'
          required: false
        folderId:
          name: folderId
          in: path
          description: Folder id
          required: true
        id:
          name: id
          in: path
          description: The id of the folder
          schema:
            type: integer
            example: 9
          required: true
        include_files:
          name: include_files
          in: query
          description: Set true if you need document content (and verso) in base64 format to be returned.
          required: false
        limit:
          name: limit
          in: query
          description: Number of results per page
          required: false
        order:
          name: order
          in: query
          required: false
          description: Order direction (ASC/DESC)
        order_by:
          name: orderBy
          in: query
          description: "'user_dossier' database property used to order the results by"
          required: false
        order_by_kebab_case:
          name: order-by
          in: query
          description: "'login' or other database properties can be used to order the results by"
          required: false
        page:
          name: page
          in: query
          description: Page number
          required: false
        personUid:
          name: personUid
          in: path
          description: Person uid
          required: true
        text_search:
          name: text_search
          in: query
          description: Text to search
          required: false
        text_search_fields:
          name: text_search_fields
          in: query
          description: Fields in which the text_search should be searched
          required: false
      responses:
        InvalidRequest:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400Error'
        NotFound:
          description: The specified resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404Error'
        ServerError:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Error'
        Success:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200Success'
        SuccessAddPerson:
          description: Success response example for the add person to folder API call
          content:
            application/json:
              schema:
                type: object
                properties:
                  personUid:
                    type: string
                    example: 61965b8c61e98
        SuccessFolders:
          description: Success response example for the GET folders API call
          content:
            application/json:
              schema:
                type: object
                properties:
                  folders:
                    type: array
                    items:
                      type: object
                      properties:
                        folderId:
                          type: integer
                          example: 12345
                        folder:
                          type: string
                          example: Folder123
                        firstName:
                          type: string
                          example: Bruce
                        lastName:
                          type: string
                          example: Wayne
                        assignedTo:
                          type: string
                          example: Admin1
                        dateOfBirth:
                          type: string
                          example: "1970-01-01T00:00:00+00:00"
                        subscription:
                          type: integer
                          example: 10
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 777
        SuccessFolderPersons:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 9
                    partnerFolderId:
                      type: integer
                      example: 51
                    status:
                      type: integer
                      example: 3
                    workflowStatus:
                      type: integer
                      example: 10400
                    label:
                      type: integer
                      example: 1
                    subscription:
                      type: integer
                      example: 20
                    persons:
                      type: array
                      items:
                        type: object
                        properties:
                          personId:
                            type: integer
                            example: 1234
                          lastName:
                            type: string
                            example: John
                          firstName:
                            type: string
                            example: Smith
                          dateOfBirth:
                            type: string
                            example: 2020-05-05T00:00:00+00:00
                          personTypeId:
                            type: integer
                            example: 221
                          personUid:
                            type: string
                            example: 5e86ebc489087
                          personInfo:
                            type: array
                            items:
                              type: object
                              properties:
                                nameInfo:
                                  type: string
                                  example: nom
                                dataInfo:
                                  type: string
                                  example: data
                                source:
                                  type: string
                                  example: IMPORT
        SuccessFolderPersonsDocuments:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: John
                    type:
                      type: integer
                      example: 51
                    status:
                      type: string
                      example: pending
                    uid:
                      type: string
                      example: 5c3479c5eec12
                    documentId:
                      type: integer
                      example: 12345
                    documenStatus:
                      type: integer
                      example: 1
                    personId:
                      type: integer
                      example: 123
        SuccessDocumentsDetails:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Kbis (CompanyID)
                  documentId:
                    type: integer
                    example: 123
                  documentUid:
                    type: string
                    example: 617f896a61e39
                  masterDocumentId:
                    type: integer
                    example: 0
                  statusVerification:
                    type: integer
                    example: 0
                  statusVerification2:
                    type: integer
                    example: 0
                  status:
                    type: integer
                    example: 1
                  creation:
                    type: string
                    example: 2021-11-01T06:30:02+00:00
                  personDocumentId:
                    type: integer
                    example: null
                  documentTypeId:
                    type: integer
                    example: 51
                  encryption:
                    type: bool
                    example: true
                  customerAnomaly:
                    type: string
                    example: null
                  partnerVerificationStatus:
                    type: string
                    example: null
                  content:
                    type: string
                    example: "/9j/4AAQSkZJRgABAQEAYABg..."
                  data:
                    type: string
                    example: "a:2:{s:20:\"agence_document_type\";s:2:\"11\";s:16:\"controle_couleur\";i:0;}"
                  size:
                    type: integer
                    example: 189842
                  anomaly:
                    type: string
                    example: null
                  visibility:
                    type: integer
                    example: 1
                  partnerDocumentId:
                    type: string
                    example: passport.jpg
                  url:
                    type: string
                    example: _TEMP_COMPANYID_1129_617f896a6179a.jpg
                  signature:
                    type: string
                    example: 6bba0ea97392769fffc24df19f7c850ba4c0bfdf9d214b490e001d7bbdfe335f
                  signatureInfos:
                    type: string
                    example: null
                  orderDocument:
                    type: integer
                    example: 21
                  type:
                    type: string
                    example: Kbis
                  mandatory:
                    type: integer
                    example: null
                  contentVerso:
                    type: string
                    example: "/9j/4AAQSkZJRgABAQEAYABg..."
                  nameVerso:
                    type: string
                    example: "Carte nationale d'identité (verso)"
        DocumentFieldsResponse:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    dbFieldName:
                      type: string
                      example: nom
                    label:
                      type: string
                      example: nom
                    mandatory:
                      type: integer
                      example: 1
                    order:
                      type: integer
                      example: 1
                    format:
                      type: integer
                      example: 1
                    helperMethod:
                      type: string
                      example: 'getCommonNom'
                    ocrFields:
                      type: integer
                      example: 1
                    validatorMethod:
                      type: string
                      example: 'validateFormData'
        WorkflowStatusHistoryResponse:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    workflowStatus:
                      type: integer
                      example: 10000
                    folderId:
                      type: integer
                      example: 123
                    createdAt:
                      type: string
                      example: '2022-01-14 09:42:38.000000'
                    updatedAt:
                      type: string
                      example: '2022-01-14 09:42:38.000000'
                    agentId:
                      type: integer
                      example: 1
                    administratorId:
                      type: integer
                      example: 1
        DocumentDataLogs:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    documentId:
                      type: integer
                      example: 1
                    createdAt:
                      type: string
                      example: '2021-11-01T06:30:02+00:00'
                    administratorId:
                      type: integer
                      example: 1
                    verification2Status:
                      type: integer
                      example: 1
        Unauthenticated:
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Error'
        LoginResponse:
          description: Returns the jwt token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: stringJWTToken
        SuccessAdministrators:
          description: Success response example for the GET administrators API call
          content:
            application/json:
              schema:
                type: object
                properties:
                  administrators:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 12
                        login:
                          type: string
                          example: alice
                        role:
                          type: integer
                          example: 1
                        email:
                          type: string
                          example: marketing@beprems.com
                        groupId:
                          type: integer
                          example: 1
      schemas:
        200Success:
          title: 200 Success
          type: object
          properties:
            statusCode:
              type: integer
              example: 200
            body:
              type: string
              example: Success
            status:
              type: string
              example: success
        400Error:
          title: 400 Error
          type: object
          properties:
            statusCode:
              type: integer
              example: 400
            body:
              type: string
              example: Invalid request
            error:
              type: string
              example: Invalid request
            status:
              type: string
              example: error
        401Error:
          title: 401 Error
          type: object
          properties:
            statusCode:
              type: integer
              example: 401
            body:
              type: string
              example: Authentication required.
            error:
              type: string
              example: Authentication required.
            status:
              type: string
              example: error
        404Error:
          title: 404 Error
          type: object
          properties:
            statusCode:
              type: integer
              example: 404
            body:
              type: string
              example: Resource not found.
            error:
              type: string
              example: Resource not found.
            status:
              type: string
              example: error
        500Error:
          title: 500 Error
          type: object
          properties:
            statusCode:
              type: integer
              example: 500
            body:
              type: string
              example: Third party issues
            error:
              type: string
              example: Third party issues
            status:
              type: string
              example: error
      securitySchemes:
        apiAuth:
          type: apiKey
          name: X-Auth-Token
          in: header
    security:
      - apiAuth: []
    paths:
      /api/v1/folders/:
        get:
          description: Get folders with or without parameters
          parameters:
            - ref: '#/components/parameters/page'
            - ref: '#/components/parameters/limit'
            - ref: '#/components/parameters/order_by'
            - ref: '#/components/parameters/order'
            - ref: '#/components/parameters/text_search'
            - ref: '#/components/parameters/text_search_fields'
            - ref: '#/components/parameters/filters'
          tags:
            - Folders
          responses:
            '200':
              description: OK
              ref: '#/components/responses/SuccessFolders'
            '400':
              description: Invalid Request
              ref: '#/components/responses/InvalidRequest'
            '401':
              description: Invalid Request
              ref: '#/components/responses/Unauthenticated'
            '500':
              description: Invalid Request
              ref: '#/components/responses/ServerError'
      /api/v1/folders/{id}:
        get:
          summary: Get the folder and folder persons informations based on the folder id
          tags:
            - Folders
          parameters:
            - ref: '#/components/parameters/id'
          responses:
            '200':
              description: OK
              ref: '#/components/responses/SuccessFolderPersons'
            '404':
              ref: '#/components/responses/NotFound'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/folders/{id}/documents:
        get:
          summary: Get the folder persons documents informations based on the folder id
          tags:
            - Folders
          parameters:
            - ref: '#/components/parameters/id'
          responses:
            '200':
              description: OK
              ref: '#/components/responses/SuccessFolderPersonsDocuments'
            '404':
              ref: '#/components/responses/NotFound'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/documents/{documentUid}:
        get:
          summary: Get the document details by documentUid
          tags:
            - Documents
          parameters:
            - ref: '#/components/parameters/documentUid'
            - ref: '#/components/parameters/include_files'
          responses:
            '200':
              description: OK
              ref: '#/components/responses/SuccessDocumentsDetails'
            '404':
              ref: '#/components/responses/NotFound'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/documents/treat:
        post:
          summary: Update document status verification 2 (statut_verification2).
          tags:
            - Documents
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    document_uid:
                      type: string
                      example: 618145978da9e
                    status_verification2:
                      type: integer
                      example: 3
          responses:
            '204':
              description: No Content
            '400':
              description: Invalid Request
              ref: '#/components/responses/InvalidRequest'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/documents/fields:
        get:
          summary: Get the document fields based on agency id, document type id and person type id
          tags:
            - Documents
          parameters:
            agency_id:
              name: agency_id
              in: query
              description: The agency id
              required: true
            document_type_id:
              name: document_type_id
              in: query
              description: The document type id
              required: true
            person_type_id:
              name: person_type_id
              in: query
              description: The person type id
              required: true
          responses:
            '200':
              description: OK
              ref: '#/components/responses/DocumentFieldsResponse'
            '400':
              ref: '#/components/responses/InvalidRequest'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/documents/document-data-logs:
        get:
          summary: Get the document data logs
          tags:
            - Documents
          parameters:
            document-ids:
              name: document-ids
              in: query
              description: The list of document ids
              required: true
              schema:
                type: array
                items:
                  type: integer
            administrator-id:
              name: administrator-id
              in: query
              description: The administrator id
              required: false
          responses:
            '200':
              description: OK
              ref: '#/components/responses/DocumentDataLogs'
            '400':
              ref: '#/components/responses/InvalidRequest'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/documents/{document_uid}:
        delete:
          summary: Delete document(s) by uid.
          tags:
            - Documents
          responses:
            '204':
              description: No Content
            '400':
              ref: '#/components/responses/InvalidRequest'
            '404':
              ref: '#/components/responses/NotFound'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/folders/{id}/add-person:
        post:
          summary: Add a person to folder with id {id}.
          tags:
            - Folders
          parameters:
            - ref: '#/components/parameters/id'
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    personTypeId:
                      type: integer
                      example: 4
                    agencyId:
                      type: integer
                      example: 4
                    firstName:
                      type: string
                      example: Snow
                    lastName:
                      type: string
                      example: John
                  required:
                    - personTypeId
                    - agencyId
          responses:
            '200':
              ref: '#/components/responses/SuccessAddPerson'
            '400':
              description: Invalid Request
              ref: '#/components/responses/InvalidRequest'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/folders/{folderId}/persons/{personUid}/documents/{documentUid}:
        put:
          summary: Assign the document(s) with the uid {documentUid} to the person with the uid {personUid}.
          tags:
            - Folders
          parameters:
            - ref: '#/components/parameters/folderId'
            - ref: '#/components/parameters/personUid'
            - ref: '#/components/parameters/documentUid'
          responses:
            '200':
              description: OK
            '400':
              description: Invalid Request
              ref: '#/components/responses/InvalidRequest'
            '404':
              description: Resource Not Found
              ref: '#/components/responses/NotFound'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/folders/{folderId}/document/merge:
        post:
          summary: Merge the documents with ids {documentIds}.
          tags:
            - Folders
          parameters:
            - ref: '#/components/parameters/folderId'
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    personUid:
                      type: string
                      example: 617ff03bb7c55
                    filename:
                      type: string
                      example: Fusion_33
                    documentTypeId:
                      type: integer
                      example: 51
                    documentIds:
                      type: array
                      example: [10144, 10145]
                      items:
                        type: integer
                  required:
                    - personUid
                    - filename
                    - documentTypeId
                    - documentIds
          responses:
            '200':
              description: OK
            '400':
              description: Invalid Request
              ref: '#/components/responses/InvalidRequest'
            '404':
              description: Resource Not Found
              ref: '#/components/responses/NotFound'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/folders/{id}/update-workflow-status:
        post:
          summary: Updates folder's workflow status.
          tags:
            - Folders
          parameters:
            - ref: '#/components/parameters/id'
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    workflowStatus:
                      type: integer
                      example: 10301
                  required:
                    - workflowStatus
          responses:
            204:
              description: No content
            '400':
              description: Invalid Request
              ref: '#/components/responses/InvalidRequest'
            '404':
              ref: '#/components/responses/NotFound'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/folders/{id}/workflow-status-history:
        get:
          summary: Gets the workflow status history of the given folder
          tags:
            - Folders
          parameters:
            id:
              name: id
              in: path
              description: The id of the folder
              schema:
                type: integer
                example: 9
              required: true
            administrator-id:
              name: administrator-id
              in: query
              description: The administrator id
              required: false
          responses:
            '200':
              ref: '#/components/responses/WorkflowStatusHistoryResponse'
            '400':
              ref: '#/components/responses/InvalidRequest'
            '500':
              ref: '#/components/responses/ServerError'
      /api/v1/users/login:
        post:
          summary: This action is used for login
          tags:
            - User
          requestBody:
            description: Log into the system using username and password
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    username:
                      type: string
                      example: username
                    password:
                      type: string
                      example: password
          responses:
            200:
              description: Returns the jwt token.
              $ref: '#/components/responses/LoginResponse'
            401:
              $ref: '#/components/responses/Unauthenticated'
      /api/v1/users/logout:
        post:
          summary: This action is used for logout
          tags:
            - User
          responses:
            204:
              description: No content
            401:
              $ref: '#/components/responses/Unauthenticated'
      /api/v1/administrators:
        get:
          description: Get administrators with or without parameters
          parameters:
            - ref: '#/components/parameters/order_by_kebab_case'
            - ref: '#/components/parameters/order'
          tags:
            - Administrators
          responses:
            '200':
              description: OK
              ref: '#/components/responses/SuccessAdministrators'
            '400':
              description: Invalid Request
              ref: '#/components/responses/InvalidRequest'
            '401':
              description: Invalid Request
              ref: '#/components/responses/Unauthenticated'
            '500':
              description: Invalid Request
              ref: '#/components/responses/ServerError'
